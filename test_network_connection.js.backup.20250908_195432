// Network connection test script
// Run this in your React Native app to test the connection

const testNetworkConnection = async () => {
  console.log('🔍 Testing network connection...');
  
  try {
    // Test basic connectivity
    const response = await fetch('http://172.20.10.2:8000/api/test', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    console.log('✅ Basic connectivity test passed');
    console.log('Response status:', response.status);
    console.log('Response headers:', response.headers);
    
    const result = await response.json();
    console.log('✅ JSON parsing successful');
    console.log('Response data:', result);
    
  } catch (error) {
    console.error('❌ Network test failed:', error);
    console.error('Error type:', error.name);
    console.error('Error message:', error.message);
    
    if (error.message.includes('JSON Parse error')) {
      console.error('🔍 JSON Parse error detected - server might be returning HTML instead of JSON');
    }
  }
};

// Test login endpoint specifically
const testLoginEndpoint = async () => {
  console.log('🔍 Testing login endpoint...');
  
  try {
    const response = await fetch('http://172.20.10.2:8000/api/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'password123',
      }),
    });
    
    console.log('✅ Login endpoint response received');
    console.log('Response status:', response.status);
    console.log('Content-Type:', response.headers.get('content-type'));
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('❌ Response not OK:', response.status, response.statusText);
      console.error('Error body:', errorText);
      return;
    }
    
    const result = await response.json();
    console.log('✅ Login test successful');
    console.log('Login result:', result);
    
  } catch (error) {
    console.error('❌ Login test failed:', error);
    console.error('Error type:', error.name);
    console.error('Error message:', error.message);
  }
};

// Export for use in React Native
export { testLoginEndpoint, testNetworkConnection };

// For direct testing
if (typeof window !== 'undefined') {
  console.log('Running network tests...');
  testNetworkConnection().then(() => {
    console.log('---');
    return testLoginEndpoint();
  });
}

